@model TexAuto.Models.Domain.Entries.Production

@{
    ViewData["Title"] = "Create";
    var decimalFields = new Dictionary<string, string>
    {
        { "ProductionEfficiency", "Production Efficiency" },
        { "Bale", "Bale" },
        { "Lap", "Lap" },
        { "Mixing", "Mixing" },
        { "NoOfDoffs", "No Of Doffs" },
        { "ConeWeight", "Cone Weight" },
        { "OpeningKgs", "Opening Kgs" },
        { "Closing", "Closing" },
        { "SliverBreaks", "Sliver Breaks" },
        { "ExpectedProduction", "Expected Production" },
        { "ProductionDrop", "Production Drop" }
    };

    string? previousShift = ViewBag.PreviousShiftDetails as string;
}

<h1 class="mb-4">Create Production</h1>

<div class="row">
    <div class="col-md-12">
        <form asp-action="Create" method="post" class="p-4 shadow-sm rounded bg-white">
            <div asp-validation-summary="ModelOnly" class="text-danger mb-3"></div>

            <input type="hidden" asp-for="ShiftId" />
            <input type="hidden" asp-for="ShiftDetails" id="ShiftDetails" />

            <!-- Production Date & Shift -->
            <div class="row mb-4">
                <div class="col-md-6">
                    <label asp-for="ProductionDate" class="form-label"></label>
                    <input asp-for="ProductionDate" type="date" class="form-control" />
                    <span asp-validation-for="ProductionDate" class="text-danger"></span>
                </div>
                <div class="col-md-6">
                    <label class="form-label">Shift</label>
                    <div class="border rounded p-2" id="ShiftOptions">Select a production date to load shifts</div>
                </div>
            </div>

            <!-- Department & Machine -->
            <div class="row mb-4">
                <div class="col-md-6">
                    <label asp-for="DepartmentId" class="form-label">Department</label>
                    <select asp-for="DepartmentId" asp-items="ViewBag.Departments" class="form-select"></select>
                    <span asp-validation-for="DepartmentId" class="text-danger"></span>
                </div>
                <div class="col-md-6">
                    <label asp-for="MachineId" class="form-label">Machine</label>
                    <select asp-for="MachineId" asp-items="ViewBag.Machines" class="form-select"></select>
                    <span asp-validation-for="MachineId" class="text-danger"></span>
                </div>
            </div>

            <!-- Product Dropdowns -->
            <div class="row mb-4">
                <div class="col-md-6">
                    <label asp-for="ProductInId" class="form-label">Product In</label>
                    <select asp-for="ProductInId" asp-items="ViewBag.Products" class="form-select"></select>
                    <span asp-validation-for="ProductInId" class="text-danger"></span>
                </div>
                <div class="col-md-6">
                    <label asp-for="ProductOutId" class="form-label">Product Out</label>
                    <select asp-for="ProductOutId" asp-items="ViewBag.Products" class="form-select"></select>
                    <span asp-validation-for="ProductOutId" class="text-danger"></span>
                </div>
            </div>

            <!-- Time Fields -->
            <div class="row mb-4">
                <div class="col-md-4">
                    <label asp-for="ShiftTime" class="form-label"></label>
                    <input asp-for="ShiftTime" class="form-control text-secondary" value="0.0"
                           onfocus="if(this.value === '0.0') this.value=''; this.classList.remove('text-secondary');"
                           onblur="if(this.value === '') { this.value='0.0'; this.classList.add('text-secondary'); }" />
                    <span asp-validation-for="ShiftTime" class="text-danger"></span>
                </div>
                <div class="col-md-4">
                    <label asp-for="RunTime" class="form-label"></label>
                    <input asp-for="RunTime" class="form-control text-secondary" value="0.0" oninput="updateIdleTime()"
                           onfocus="if(this.value === '0.0') this.value=''; this.classList.remove('text-secondary');"
                           onblur="if(this.value === '') { this.value='0.0'; this.classList.add('text-secondary'); }" />
                    <span asp-validation-for="RunTime" class="text-danger"></span>
                </div>
                <div class="col-md-4">
                    <label asp-for="IdleTime" class="form-label"></label>
                    <input asp-for="IdleTime" class="form-control text-secondary" value="0.0" readonly />
                    <span asp-validation-for="IdleTime" class="text-danger"></span>
                </div>
            </div>

            <!-- Hank Fields -->
            <div class="row mb-4">
                <div class="col-md-4" id="openingHankField" style="display:none;">
                    <label asp-for="OpeningHank" class="form-label"></label>
                    <input asp-for="OpeningHank" class="form-control" value="0.00"
                           id="OpeningHank"
                           oninput="calculateDelHank()"
                           onfocus="if(this.value === '0.00') this.value='';"
                           onblur="if(this.value === '') this.value='0.00';" />

                    <span asp-validation-for="OpeningHank" class="text-danger"></span>
                </div>
                <div class="col-md-4" id="closingHankField" style="display:none;">
                    <label asp-for="ClosingHank" class="form-label"></label>
                    <input asp-for="ClosingHank" class="form-control" value="0.00"
                           id="ClosingHank"
                           oninput="calculateDelHank()"
                           onfocus="if(this.value === '0.00') this.value='';"
                           onblur="if(this.value === '') this.value='0.00';" />
                    <span asp-validation-for="ClosingHank" class="text-danger"></span>
                </div>
                <div class="col-md-4" id="delHankField" style="display:none;">
                    <label asp-for="DelHank" class="form-label"></label>
                    <input asp-for="DelHank" class="form-control" id="DelHank" readonly />
                    <span asp-validation-for="DelHank" class="text-danger"></span>
                    <br />
                </div>
                
                <div class="col-md-4">
                    <label asp-for="TotalProduction" class="form-label"></label>
                    <input asp-for="TotalProduction" class="form-control text-secondary"
                           id="TotalProduction"
                           value="0.00"
                           onfocus="if(this.value === '0.00') this.value='';"
                           onblur="if(this.value === '') this.value='0.00';" />
                    <span asp-validation-for="TotalProduction" class="text-danger"></span>
                </div>

            </div>

            

            <!-- Decimal Fields -->
            <div class="row g-3">
                @foreach (var field in decimalFields)
                {
                    <div class="col-md-6">
                        <label class="form-label" for="@field.Key">@field.Value</label>
                        <input name="@field.Key" id="@field.Key" class="form-control text-secondary" value="0.00"
                               onfocus="if(this.value === '0.00') this.value='';"
                               onblur="if(this.value === '') this.value='0.00';" />
                    </div>
                }
            </div>

            <!-- Actions -->
            <div class="mt-4 text-end">
                <input type="submit" value="Create" class="btn btn-primary px-4" />
                <a asp-action="Index" class="btn btn-outline-secondary ms-2">Back to List</a>
            </div>
        </form>
    </div>
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />

    <script>
        const previousShiftDetails = '@ViewBag.PreviousShiftDetails';
        const defaultShiftNumber = '@ViewBag.DefaultShiftNumber';

        function parseTimeToDecimal(timeStr) {
            const [time, modifier] = timeStr.split(" ");
            let [hours, minutes] = time.split(":").map(Number);
            if (modifier === "PM" && hours < 12) hours += 12;
            if (modifier === "AM" && hours === 12) hours = 0;
            return hours + minutes / 60;
        }

        function updateIdleTime() {
            const shiftTime = parseFloat(document.querySelector('[name="ShiftTime"]').value) || 0;
            const runTime = parseFloat(document.querySelector('[name="RunTime"]').value) || 0;
            const idleTime = Math.max(0, shiftTime - runTime).toFixed(2);
            document.querySelector('[name="IdleTime"]').value = idleTime;
        }

        function loadShifts(date) {
            fetch(`/Productions/GetShiftsByDate?productionDate=${date}`)
                .then(res => res.json())
                .then(data => {
                    const shiftContainer = document.getElementById('ShiftOptions');
                    const shiftIdInput = document.querySelector('[name="ShiftId"]');
                    shiftContainer.innerHTML = '';

                    if (data.length === 0) {
                        shiftContainer.innerHTML = '<span class="text-danger">No shifts available for the selected date.</span>';
                        shiftIdInput.value = '';
                        return;
                    }

                    const [baseShiftId] = data[0].id.split('_');
                    shiftIdInput.value = baseShiftId;

                    data.forEach((shift, index) => {
                        const shiftText = `${shift.name} (${shift.fromTime} - ${shift.toTime})`;
                        const radioId = `shiftRadio${index}`;
                        const isChecked = previousShiftDetails === shiftText || (index === 0 && !previousShiftDetails);

                        const radioHTML = `
                            <div class="form-check">
                                <input class="form-check-input" type="radio" name="ShiftSelection" id="${radioId}"
                                       value="${shiftText}" ${isChecked ? "checked" : ""}>
                                <label class="form-check-label" for="${radioId}">${shiftText}</label>
                            </div>`;

                        shiftContainer.insertAdjacentHTML('beforeend', radioHTML);

                        if (isChecked) {
                            document.getElementById('ShiftDetails').value = shiftText;
                            const start = parseTimeToDecimal(shift.fromTime);
                            const end = parseTimeToDecimal(shift.toTime);
                            let duration = end - start;
                            if (duration < 0) duration += 24;
                            document.querySelector('[name="ShiftTime"]').value = duration.toFixed(2);
                            updateIdleTime();
                        }
                    });

                    shiftContainer.addEventListener('change', function (e) {
                        if (e.target.name === 'ShiftSelection') {
                            const shiftValue = e.target.value;
                            document.getElementById('ShiftDetails').value = shiftValue;

                            const matches = shiftValue.match(/\d{2}:\d{2} [APM]{2}/g);
                            if (!matches || matches.length < 2) return;

                            const start = parseTimeToDecimal(matches[0]);
                            const end = parseTimeToDecimal(matches[1]);
                            let duration = end - start;
                            if (duration < 0) duration += 24;

                            document.querySelector('[name="ShiftTime"]').value = duration.toFixed(2);
                            updateIdleTime();
                        }
                    });
                });
        }

        document.getElementById('ProductionDate').addEventListener('change', function () {
            const date = this.value;
            if (date) loadShifts(date);
        });

            window.addEventListener('DOMContentLoaded', function () {
            const dateInput = document.getElementById('ProductionDate');
            if (dateInput && dateInput.value) {
                const event = new Event('change');
                dateInput.dispatchEvent(event);
            }

            const machineSelect = document.getElementById("MachineId");
            if (machineSelect && machineSelect.value) {
                const machineId = machineSelect.value;
                fetch(`/Productions/GetMachineCalculationType?machineId=${machineId}`)
                    .then(res => res.json())
                    .then(data => {
                        const isHank = data === "Hank";
                        document.getElementById("openingHankField").style.display = isHank ? "block" : "none";
                        document.getElementById("closingHankField").style.display = isHank ? "block" : "none";
                        document.getElementById("delHankField").style.display = isHank ? "block" : "none";
                    });
            }

        });



        document.getElementById("MachineId").addEventListener("change", function () {
            const machineId = this.value;

            fetch(`/Productions/GetMachineCalculationType?machineId=${machineId}`)
                .then(res => res.json())
                .then(data => {
                    const isHank = data === "Hank";

                    // Toggle Hank fields
                    document.getElementById("openingHankField").style.display = isHank ? "block" : "none";
                    document.getElementById("closingHankField").style.display = isHank ? "block" : "none";
                    document.getElementById("delHankField").style.display = isHank ? "block" : "none";

                    // Toggle readonly for TotalProduction
                    const totalProdInput = document.getElementById("TotalProduction");
                    if (totalProdInput) {
                        totalProdInput.readOnly = isHank;
                        totalProdInput.classList.toggle("bg-light", isHank);
                    }

                    // Set OpeningHank if blank
                    if (isHank) {
                        fetch(`/Productions/GetLastClosingHank?machineId=${machineId}`)
                            .then(res => res.json())
                            .then(closingHank => {
                                const openingInput = document.getElementById("OpeningHank");
                                if (openingInput && (!openingInput.value || openingInput.value === "0.00")) {
                                    openingInput.value = parseFloat(closingHank).toFixed(2);
                                    calculateDelHank();
                                }
                            });
                    }
                });
        });



        function calculateDelHank() {
            const opening = parseInt(document.getElementById('OpeningHank')?.value) || 0;
            const closing = parseInt(document.getElementById('ClosingHank')?.value) || 0;

            const max = Math.max(opening, closing);
            const digits = max.toString().length;
            const maxHank = Math.pow(10, digits) - 1;

            let result = 0;
            if (closing >= opening) {
                result = closing - opening;
            } else {
                result = (maxHank + 1 - opening) + closing;
            }

            document.getElementById('DelHank').value = result.toFixed(2);
        }
                window.addEventListener('DOMContentLoaded', function () {
            const machineSelect = document.getElementById("MachineId");
            if (machineSelect && machineSelect.value) {
                const event = new Event('change');
                machineSelect.dispatchEvent(event);
            }
        });

    </script>
}

<style>
    #ShiftOptions .form-check {
        margin-bottom: 0.5rem;
    }

    form {
        transition: all 0.3s ease-in-out;
    }

    .form-control:focus, .form-select:focus {
        border-color: #0d6efd;
        box-shadow: 0 0 0 0.2rem rgba(13, 110, 253, 0.25);
    }

    .btn-primary {
        transition: background-color 0.2s ease-in-out;
    }

        .btn-primary:hover {
            background-color: #0b5ed7;
        }

    input[readonly] {
        background-color: #f8f9fa;
    }

</style>
