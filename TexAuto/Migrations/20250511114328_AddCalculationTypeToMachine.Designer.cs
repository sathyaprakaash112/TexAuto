// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TexAuto.Data;

#nullable disable

namespace TexAuto.Migrations
{
    [DbContext(typeof(TexAutoContext))]
    [Migration("20250511114328_AddCalculationTypeToMachine")]
    partial class AddCalculationTypeToMachine
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TexAuto.Models.Domain.Creation.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Departments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Mixing",
                            Name = "Mixing"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Blowroom",
                            Name = "Blowroom"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Carding",
                            Name = "Carding"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Drawing Breaker",
                            Name = "Drawing Breaker"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Drawing Finisher",
                            Name = "Drawing Finisher"
                        },
                        new
                        {
                            Id = 6,
                            Description = "Simplex",
                            Name = "Simplex"
                        },
                        new
                        {
                            Id = 7,
                            Description = "Spinning",
                            Name = "Spinning"
                        },
                        new
                        {
                            Id = 8,
                            Description = "Cone Winsing",
                            Name = "Cone Winsing"
                        },
                        new
                        {
                            Id = 9,
                            Description = "Autoconer",
                            Name = "Autoconer"
                        },
                        new
                        {
                            Id = 10,
                            Description = "Packing",
                            Name = "Packing"
                        },
                        new
                        {
                            Id = 11,
                            Description = "Sweeping",
                            Name = "Sweeping"
                        },
                        new
                        {
                            Id = 12,
                            Description = "Extra Work",
                            Name = "Extra Work"
                        });
                });

            modelBuilder.Entity("TexAuto.Models.Domain.Creation.Machine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CalculationType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MachineTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Number")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("MachineTypeId");

                    b.ToTable("Machines");
                });

            modelBuilder.Entity("TexAuto.Models.Domain.Creation.MachineType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.ToTable("MachineTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DepartmentId = 1,
                            Name = "Bale Plucker"
                        },
                        new
                        {
                            Id = 2,
                            DepartmentId = 2,
                            Name = "Blowroom"
                        },
                        new
                        {
                            Id = 3,
                            DepartmentId = 3,
                            Name = "Carding"
                        },
                        new
                        {
                            Id = 4,
                            DepartmentId = 4,
                            Name = "Drawing Breaker"
                        },
                        new
                        {
                            Id = 5,
                            DepartmentId = 5,
                            Name = "Drawing Finisher"
                        },
                        new
                        {
                            Id = 6,
                            DepartmentId = 6,
                            Name = "Simplex"
                        },
                        new
                        {
                            Id = 7,
                            DepartmentId = 7,
                            Name = "Spinning"
                        },
                        new
                        {
                            Id = 8,
                            DepartmentId = 8,
                            Name = "Cone Winsing"
                        },
                        new
                        {
                            Id = 9,
                            DepartmentId = 9,
                            Name = "Autoconer"
                        });
                });

            modelBuilder.Entity("TexAuto.Models.Domain.Creation.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("ProductTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductTypeId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Cotton Raw",
                            ProductTypeId = 1
                        },
                        new
                        {
                            Id = 2,
                            Name = "Sliver Type A",
                            ProductTypeId = 2
                        },
                        new
                        {
                            Id = 3,
                            Name = "Yarn 30s",
                            ProductTypeId = 6
                        });
                });

            modelBuilder.Entity("TexAuto.Models.Domain.Creation.ProductType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.ToTable("ProductTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DepartmentId = 1,
                            Name = "Cotton"
                        },
                        new
                        {
                            Id = 2,
                            DepartmentId = 3,
                            Name = "Carding Sliver"
                        },
                        new
                        {
                            Id = 3,
                            DepartmentId = 4,
                            Name = "Breaker Sliver"
                        },
                        new
                        {
                            Id = 4,
                            DepartmentId = 5,
                            Name = "Finisher Sliver"
                        },
                        new
                        {
                            Id = 5,
                            DepartmentId = 6,
                            Name = "Roving"
                        },
                        new
                        {
                            Id = 6,
                            DepartmentId = 7,
                            Name = "Spin Yarn"
                        },
                        new
                        {
                            Id = 7,
                            DepartmentId = 8,
                            Name = "Winded Yarn"
                        },
                        new
                        {
                            Id = 8,
                            DepartmentId = 9,
                            Name = "Autoconed Yarn"
                        },
                        new
                        {
                            Id = 9,
                            DepartmentId = 10,
                            Name = "Bag"
                        });
                });

            modelBuilder.Entity("TexAuto.Models.Domain.Creation.WasteType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsSellable")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProductionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("ProductionId");

                    b.ToTable("WasteType");
                });

            modelBuilder.Entity("TexAuto.Models.Domain.Entries.Production", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Bale")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Closing")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ConeWeight")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("DelHank")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<decimal>("ExpectedProduction")
                        .HasColumnType("decimal(18,2)");

                    b.Property<double>("IdleTime")
                        .HasColumnType("float");

                    b.Property<decimal>("Lap")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("MachineId")
                        .HasColumnType("int");

                    b.Property<decimal>("Mixing")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("NoOfDoffs")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("OpeningKgs")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductInId")
                        .HasColumnType("int");

                    b.Property<int>("ProductOutId")
                        .HasColumnType("int");

                    b.Property<DateOnly>("ProductionDate")
                        .HasColumnType("date");

                    b.Property<decimal>("ProductionDrop")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ProductionEfficiency")
                        .HasColumnType("decimal(18,2)");

                    b.Property<double>("RunTime")
                        .HasColumnType("float");

                    b.Property<string>("ShiftDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ShiftId")
                        .HasColumnType("int");

                    b.Property<double>("ShiftTime")
                        .HasColumnType("float");

                    b.Property<decimal>("SliverBreaks")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalProduction")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("MachineId");

                    b.HasIndex("ProductInId");

                    b.HasIndex("ProductOutId");

                    b.HasIndex("ProductionDate");

                    b.HasIndex("ShiftId");

                    b.ToTable("Productions");
                });

            modelBuilder.Entity("TexAuto.Models.Domain.Entries.Shift", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("EffectiveDate")
                        .HasColumnType("date");

                    b.Property<TimeOnly?>("EndTime1")
                        .HasColumnType("time");

                    b.Property<TimeOnly?>("EndTime2")
                        .HasColumnType("time");

                    b.Property<TimeOnly?>("EndTime3")
                        .HasColumnType("time");

                    b.Property<TimeOnly?>("EndTime4")
                        .HasColumnType("time");

                    b.Property<TimeOnly?>("StartTime1")
                        .HasColumnType("time");

                    b.Property<TimeOnly?>("StartTime2")
                        .HasColumnType("time");

                    b.Property<TimeOnly?>("StartTime3")
                        .HasColumnType("time");

                    b.Property<TimeOnly?>("StartTime4")
                        .HasColumnType("time");

                    b.Property<int>("TotalShifts")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Shifts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            EffectiveDate = new DateOnly(2024, 1, 1),
                            EndTime1 = new TimeOnly(20, 0, 0),
                            EndTime2 = new TimeOnly(8, 0, 0),
                            StartTime1 = new TimeOnly(8, 0, 0),
                            StartTime2 = new TimeOnly(20, 0, 0),
                            TotalShifts = 2
                        });
                });

            modelBuilder.Entity("TexAuto.Models.Domain.Entries.Waste", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("WasteTypeId")
                        .HasColumnType("int");

                    b.Property<decimal>("Weight")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("WasteTypeId");

                    b.ToTable("Wastes");
                });

            modelBuilder.Entity("TexAuto.Models.Domain.Creation.Machine", b =>
                {
                    b.HasOne("TexAuto.Models.Domain.Creation.Department", null)
                        .WithMany("Machines")
                        .HasForeignKey("DepartmentId");

                    b.HasOne("TexAuto.Models.Domain.Creation.MachineType", "MachineType")
                        .WithMany()
                        .HasForeignKey("MachineTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MachineType");
                });

            modelBuilder.Entity("TexAuto.Models.Domain.Creation.MachineType", b =>
                {
                    b.HasOne("TexAuto.Models.Domain.Creation.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("TexAuto.Models.Domain.Creation.Product", b =>
                {
                    b.HasOne("TexAuto.Models.Domain.Creation.ProductType", "ProductType")
                        .WithMany()
                        .HasForeignKey("ProductTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductType");
                });

            modelBuilder.Entity("TexAuto.Models.Domain.Creation.ProductType", b =>
                {
                    b.HasOne("TexAuto.Models.Domain.Creation.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("TexAuto.Models.Domain.Creation.WasteType", b =>
                {
                    b.HasOne("TexAuto.Models.Domain.Creation.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TexAuto.Models.Domain.Entries.Production", null)
                        .WithMany("Wastes")
                        .HasForeignKey("ProductionId");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("TexAuto.Models.Domain.Entries.Production", b =>
                {
                    b.HasOne("TexAuto.Models.Domain.Creation.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TexAuto.Models.Domain.Creation.Machine", "Machine")
                        .WithMany()
                        .HasForeignKey("MachineId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TexAuto.Models.Domain.Creation.Product", "ProductIn")
                        .WithMany()
                        .HasForeignKey("ProductInId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TexAuto.Models.Domain.Creation.Product", "ProductOut")
                        .WithMany()
                        .HasForeignKey("ProductOutId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TexAuto.Models.Domain.Entries.Shift", "Shift")
                        .WithMany()
                        .HasForeignKey("ShiftId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("Machine");

                    b.Navigation("ProductIn");

                    b.Navigation("ProductOut");

                    b.Navigation("Shift");
                });

            modelBuilder.Entity("TexAuto.Models.Domain.Entries.Waste", b =>
                {
                    b.HasOne("TexAuto.Models.Domain.Creation.WasteType", "WasteType")
                        .WithMany()
                        .HasForeignKey("WasteTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WasteType");
                });

            modelBuilder.Entity("TexAuto.Models.Domain.Creation.Department", b =>
                {
                    b.Navigation("Machines");
                });

            modelBuilder.Entity("TexAuto.Models.Domain.Entries.Production", b =>
                {
                    b.Navigation("Wastes");
                });
#pragma warning restore 612, 618
        }
    }
}
